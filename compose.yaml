# This Docker Compose configuration is tailored for the JCasC (`JCasC/jenkins.yaml`) that is bundled within this repository
name: Jenkins
services:
  Jenkins:
    container_name: Jenkins
    image: jenkins:lts
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Dockerfile # ./Dockerfile installs plugins on top of jenkins:lts image
    networks:
      - Jenkins
    environment:
      - TZ=${TZ}
      - CASC_JENKINS_CONFIG=/var/jenkins_home/JCasC
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false # Skip setup wizard, JCasC (jenkins.yaml) handles it
      - JENKINS_URL=${JENKINS_URL}
      - DOCKER_HOST=unix:///var/run/docker.sock # Used in JCasC (jenkins.yaml) to configure Docker Clouds plugin and agent templates
      - DOCKER_GID=${DOCKER_GID} # Used in JCasC (jenkins.yaml) to configure Docker Clouds plugin and agent templates
      - DOCKER_VOLUMES=${DOCKER_VOLUMES} # I use a single folder to manage all my Docker bind mounts, this is passed into the container and referenced within JCasC (jenkins.yaml) in order to allow agent containers to spin up containers and compose configurations that utilize the DOCKER_VOLUMES environment variable
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=465 # If changing the SMTP port, you must also change `useSsl: true` within JCasC (jenkins.yaml)
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - REPLY_TO_EMAIL=${REPLY_TO_EMAIL}
      - ADMIN_ADDRESS=${ADMIN_ADDRESS}
      - systemMessage=${systemMessage}
      - JENKINS_ADMIN_USER=${JENKINS_ADMIN_USER}
      - JENKINS_ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD}
      - GIT_USERNAME=${GIT_USERNAME}
      - GIT_TOKEN=${GIT_TOKEN}
      - ORGFOLDER_NAME=${ORGFOLDER_NAME}
      - ORGFOLDER_DISPLAY_NAME=${ORGFOLDER_DISPLAY_NAME}
      - ORGFOLDER_DESCRIPTION=${ORGFOLDER_DESCRIPTION}
      - GIT_SERVER_URL=${GIT_SERVER_URL}
      - BITWARDEN_SERVER_URL=${BITWARDEN_SERVER_URL} # Used in JCasC to automatically configure Bitwarden Credentials Provider Plugin
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_VOLUMES}/Jenkins/home:/var/jenkins_home
      - ./JCasC:/var/jenkins_home/JCasC
    group_add:
      - ${DOCKER_GID} # Replace this with the output from `getent group docker | cut -d: -f3` on your host machine in order to ensure Jenkins controller has permission to access the Docker Socket
    deploy:
      resources: # Jenkins controller is configured with Docker Plugin to provide ephemeral build agents and this configuration assumes a single user, thus the low resource limits. Always make sure to configure resources limits in the dynamic build agent templates!
        limits:
          cpus: "1"
          memory: 1GB

networks:
  Jenkins:
    name: Jenkins
    external: true
