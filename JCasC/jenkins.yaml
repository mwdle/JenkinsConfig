# This JCasC file is tailored for the Docker Compose configuration (`../compose.yaml`) that is bundled within this repository
jenkins:
  systemMessage: "${systemMessage}"
  noUsageStatistics: true
  slaveAgentPort: -1 # Docker Plugin attaches directly to dynamic agent containers, thus agent port is not needed.
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "${JENKINS_ADMIN_USER}" # See compose.yaml
          password: "${JENKINS_ADMIN_PASSWORD}" # See compose.yaml
          properties:
            - theme:
                theme: "darkSystem" # Requires plugin `dark-theme` - see `Dockerfile.jenkins`

  authorizationStrategy: # IMPORTANT: This configuration assumes a single user instance. If this instance will have more than one user or the users are not fully trusted, this authorization strategy MUST BE REPLACED with something more secure.
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  disableRememberMe: false # Don't disable "Keep me signed in‚Äù

  crumbIssuer: "standard"
  mode: NORMAL
  numExecutors: 0 # No executors on built-in node

  clouds:
    - docker:
        name: "docker"
        containerCap: 100 # Default is 100, adjust as needed
        dockerApi:
          dockerHost:
            uri: "${DOCKER_HOST}" # See compose.yaml
          connectTimeout: 30
        exposeDockerHost: true
        templates:
          - connector:
              attach:
                user: "jenkins" # Assumes the agent should run as user `jenkins`
            dockerTemplateBase:
              image: mwdle/jenkins-agent:latest # https://hub.docker.com/repository/docker/mwdle/jenkins-agent/general
              environmentsString: |- # See compose.yaml
                BITWARDEN_SERVER_URL=${BITWARDEN_SERVER_URL}
                TZ=${TZ}
              # Agent containers use Docker CLI to control host Docker daemon (Docker-out-of-Docker pattern).
              # Enables relative bind mounts in Docker Compose configurations by mounting a folder from host filesystem into the agent container and mirroring paths on the host and the agent containers.
              # Without path mirroring, Compose configurations with relative bind mounts (e.g. './relativeFile') fail to deploy because agent container and host Docker Daemon see different absolute paths and have separate filesystems.
              # This configuration ensures both agent and host resolve '${DOCKER_VOLUMES}/deployments' to the same location inside and outside the agent container.
              # Requires `${DOCKER_VOLUMES}/deployments` directory structure with proper permissions on host filesystem -- See compose.yaml.
              mountsString: |-
                type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock
                type=bind,source=/etc/localtime,destination=/etc/localtime:ro
                type=bind,source=${DOCKER_VOLUMES}/deployments,destination=${DOCKER_VOLUMES}/deployments
              extraGroupsString: "${DOCKER_GID}"
            labelString: "docker"
            mode: EXCLUSIVE
            name: "docker"
            remoteFs: "/home/jenkins" # Assumes the agent has /home/jenkins

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: "git-creds"
              username: "${GIT_USERNAME}" # See compose.yaml
              password: "${GIT_TOKEN}" # See compose.yaml
              description: "Gitea credentials for organization folder"
          - usernamePassword:
              scope: GLOBAL
              id: "bitwarden-api-key"
              username: "${BITWARDEN_CLIENTID}" # See compose.yaml
              password: "${BITWARDEN_CLIENTSECRET}" # See compose.yaml
              description: "Bitwarden CLI API Credentials"
          - string:
              scope: GLOBAL
              id: "bitwarden-master-password"
              secret: "${BITWARDEN_MASTER_PASSWORD}" # See compose.yaml
              description: "Bitwarden CLI Master Password"
          - usernamePassword:
              scope: GLOBAL
              id: "docker-hub"
              username: "${DOCKER_USERNAME}" # See compose.yaml
              password: "${DOCKER_TOKEN}" # See compose.yaml
              description: "Docker Hub Access Token"

unclassified:
  location:
    url: "${JENKINS_URL}"
    adminAddress: "${ADMIN_ADDRESS}" # See compose.yaml

  giteaServers:
    servers:
      - credentialsId: git-creds
        displayName: scm
        manageHooks: true
        serverUrl: ${GIT_SERVER_URL} # See compose.yaml

  globalLibraries:
    libraries:
      - defaultVersion: "main"
        name: "JenkinsBitwardenUtils"
        retriever:
          modernSCM:
            scm:
              git:
                remote: ${GIT_SERVER_URL}/mwdle/JenkinsBitwardenUtils.git # Also on Github! https://github.com/mwdle/JenkinsBitwardenUtils
                traits:
                  - "gitBranchDiscovery"
      - defaultVersion: "main"
        name: "JenkinsPipelines"
        retriever:
          modernSCM:
            scm:
              git:
                remote: ${GIT_SERVER_URL}/mwdle/JenkinsPipelines.git # Also on Github! https://github.com/mwdle/JenkinsPipelines
                traits:
                  - "gitBranchDiscovery"

  mailer:
    replyToAddress: ${REPLY_TO_EMAIL} # See compose.yaml
    smtpHost: ${SMTP_HOST} # See compose.yaml
    smtpPort: ${SMTP_PORT} # See compose.yaml
    useSsl: true
    authentication:
      username: ${SMTP_USERNAME} # See compose.yaml
      password: ${SMTP_PASSWORD} # See compose.yaml

  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
      - simpleBuildDiscarder:
          discarder:
            logRotator:
              numToKeepStr: "1000000"
              daysToKeepStr: "730"

jobs:
  - file: /var/jenkins_home/JCasC/orgfolder.groovy
  - file: /var/jenkins_home/JCasC/multibranch.groovy
